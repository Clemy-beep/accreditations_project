// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique
  firstname String
  lastname String
  password String
  date_of_birth DateTime
  registerDate DateTime @default(now())
  followedBy User[]  @relation("UserFollows", references: [id])
  following  User[]  @relation("UserFollows", references: [id])
  avatar String
  role Role @default(USER)
  postedPublications Publication[] @relation("PostedPublications")
  moderatedPublications Publication[] @relation("ModeratedPublications")
  lists List[]
  rates Rate[]
  publicationComments PublicationComment[]
  listComments ListComment[]
  isRestricted Boolean
  token String?
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Publication {
  id Int @id @default(autoincrement())
  title String @unique
  resume String @db.LongText
  casting ActorsOnFilm[]
  realisatorId Int?
  realisator Realisator? @relation(fields: [realisatorId], references : [id])
  producerId Int?
  producer Producer? @relation(fields: [producerId], references : [id])
  genres FilmGenres[]
  budget Float?
  poster String?
  rates Rate[]
  authorId Int
  author User @relation(name: "PostedPublications",fields: [authorId], references : [id])
  moderatorId Int?
  moderator User? @relation(name: "ModeratedPublications",fields: [moderatorId], references : [id])
  createdAt DateTime @default(now())
  status String
  critic String @db.LongText
  isOpenToComment Boolean @default(true)
  comments PublicationComment[]
  lists FilmsInLists[]
}

model List {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  films FilmsInLists[]
  authorId Int
  author User @relation(fields: [authorId], references : [id])
  description String @db.LongText
  public Boolean
  comments ListComment[]
}

model FilmsInLists {
  listId Int
  list List @relation(fields: [listId], references : [id])
  film Publication @relation(fields: [filmId], references : [id])
  filmId Int

  @@id([listId, filmId])
}

model Actor {
  id Int @id @default(autoincrement())
  firstname String @db.VarChar(100)
  lastname String @db.VarChar(100)
  age Int
  films ActorsOnFilm[]
}

model ActorsOnFilm {
  actorId Int
  actor Actor @relation(fields: [actorId], references : [id])
  filmId Int
  film Publication @relation(fields: [filmId], references :[id])

  @@id([actorId, filmId])
}

model Realisator {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  films Publication[]
}

model Producer {
  id Int @id @default(autoincrement())
  firstname String?
  lastname String?
  societyname String
  films Publication[]
}

model Genre {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  films FilmGenres[]
}

model FilmGenres {
  film Publication @relation(fields:[filmId], references : [id])
  filmId Int
  genre Genre @relation(fields:[genreId], references : [id])
  genreId Int

  @@id([filmId, genreId])
}

model Rate{
  id Int @id @default(autoincrement())
  rate Int
  issuer User @relation(fields:[issuerId], references : [id])
  issuerId Int 
  film Publication @relation(fields: [filmId], references : [id])
  filmId Int

  @@unique([filmId, issuerId])
}

model PublicationComment{
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references : [id])
  authorId Int
  film Publication @relation(fields: [filmId], references : [id])
  filmId Int
  text String @db.LongText
  createdAt DateTime @default(now())
}

model ListComment {
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references : [id])
  authorId Int
  listId Int
  list List @relation(fields: [listId], references :[id])
  createdAt DateTime @default(now())
}